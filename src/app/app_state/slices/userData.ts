import { fetchUserData, FetchUserDataResponse } from "@/app/api/users";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

// i built this while learning redux at the same time so alot of comments might be so werid in the files 

export interface UserDataInterface {
    id : number;
    username: string;
    email: string;
    phone: string;
    account_balance: number;
}

// note : the interface and the initial state actulay define the structure of the state of the reducer
// and for each state we have to define its slice just as we have done down there for the userProfileData
const initialState : UserDataInterface = {
    id : 0,
    username : "name",
    email : "example@gmail.com",
    phone : "0000000000",
    account_balance : 0,
};

// we can then have as many slices as possible with each having its own individual pieces of state 

// we now need to define the actual reducers now 
const userDataSlice = createSlice({
    name: "userData",
    initialState,
    reducers: {
        updateUserIdAndUsername: (state , action : PayloadAction<{id : number , username : string}>) => {
            state.id = action.payload.id;
            state.username = action.payload.username;
        },
    },
    extraReducers: (builder) => {
        builder
        .addCase(updateUserDataAsync.fulfilled, (state , action : PayloadAction<FetchUserDataResponse>) => {
            state.username = action.payload.username;
            state.email = action.payload.email;
            state.phone = action.payload.phone;
            state.account_balance = Number(action.payload.account_balance);
        })
        .addCase(updateUserDataAsync.pending, () => { // for pending ther is no need for taking a state since it has no effect on the state
            console.log(`updateUserDataAsync.pending`);
        })
        .addCase(updateUserDataAsync.rejected, (state , action) => {
            console.log('failed to fetch user data form the backend');
        })
    }
})


/**
 * asyncronouse reducer action for the user data with the account_balance and other values
 */
export const updateUserDataAsync = createAsyncThunk(
    "userDataSlice/updateUserDataAsync",
    async () =>{
        const userDataResponse = await fetchUserData()
        return userDataResponse;
    }
)

// we will then need to have actions to trigger the reducers right and redux toolkit does the heavy lifting for us and all we have to do is : 
// export const {incrementAccountByOne, decrementAccountByOne, updateUserData} = userDataSlice.actions; im leaving this here to remind myslef of how the autogenerated actions are expoted


export const {updateUserIdAndUsername} = userDataSlice.actions;
export default userDataSlice.reducer;
